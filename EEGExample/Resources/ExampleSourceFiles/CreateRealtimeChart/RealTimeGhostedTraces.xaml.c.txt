using System;
using System.Collections.Generic;
using System.Linq;
using System.Timers;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;
using Abt.Controls.SciChart.Example.Data;
using Abt.Controls.SciChart.Model.DataSeries;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.CreateRealtimeChart
{
    public partial class RealTimeGhostedTraces : UserControl, IExampleAware
    {
        private readonly CircularBuffer<XyDataSeries<double, double>> _dataSeries = new CircularBuffer<XyDataSeries<double, double>>(10);
        readonly Random random = new Random();
        private double _lastAmplitude = 1.0;
        private DispatcherTimer timer;

        public RealTimeGhostedTraces()
        {
            InitializeComponent();
        }

        /// <summary>
        ///     Every X milliseconds we create a new DataSeries and append new data to it. We also enqueue this into a circular buffer of 10 Data-Series. 
        ///     Then, all the DataSeries are re-assigned to RenderableSeries with varying opacity. This gives the impression of a trace 'ghosting' - becoming
        ///     more transparent as time elapses. 
        /// </summary>
        private void TimerOnElapsed(object sender, EventArgs e)
        {
            var newDataSeries = new XyDataSeries<double, double>();

            // Create a noisy sinewave and cache
            //  All this code is about the generation of data to create a nice randomized sinewave with 
            //  varying phase and amplitude
            double randomAmplitude = Constrain(_lastAmplitude + ((random.NextDouble()) - 0.50), -2.0, 2.0);
            const double phase = 0.0;
            var noisySinewave = GetNoisySinewave(randomAmplitude, phase, 1000, 0.25).ToArray();
            _lastAmplitude = randomAmplitude;

            // Append to a new dataseries
            newDataSeries.Append(noisySinewave.Select(pt => pt.X), noisySinewave.Select(pt => pt.Y));

            // Enqueue to the circular buffer
            _dataSeries.Add(newDataSeries);

            // Reassign all DataSeries to RenderableSeries
            ReassignRenderableSeries(_dataSeries);
        }

        private static double Constrain(double value, double noLowerThan, double noBiggerThan)
        {
            return Math.Max(Math.Min(value, noBiggerThan), noLowerThan);
        }

        /// <summary>
        ///     This method shifts all the data series, e.g. if you have RenderableSeries 0-9 and DataSeries 0-9, after 
        ///     a shift Dataseries 1-10 will be applied to renderableseries 0-9
        /// </summary>
        /// <param name="dataSeries"></param>
        private void ReassignRenderableSeries(CircularBuffer<XyDataSeries<double, double>> dataSeries)
        {
            // Prevent redrawing while reassigning
            using (sciChartSurface.SuspendUpdates())
            {
                // Always the latest dataseries
                if (dataSeries.Count > 0) sciChartSurface.RenderableSeries[0].DataSeries = dataSeries[dataSeries.Count - 1]; 
                if (dataSeries.Count > 1) sciChartSurface.RenderableSeries[1].DataSeries = dataSeries[dataSeries.Count - 2];
                if (dataSeries.Count > 2) sciChartSurface.RenderableSeries[2].DataSeries = dataSeries[dataSeries.Count - 3];
                if (dataSeries.Count > 3) sciChartSurface.RenderableSeries[3].DataSeries = dataSeries[dataSeries.Count - 4];
                if (dataSeries.Count > 4) sciChartSurface.RenderableSeries[4].DataSeries = dataSeries[dataSeries.Count - 5];
                if (dataSeries.Count > 5) sciChartSurface.RenderableSeries[5].DataSeries = dataSeries[dataSeries.Count - 6];
                if (dataSeries.Count > 6) sciChartSurface.RenderableSeries[6].DataSeries = dataSeries[dataSeries.Count - 7];
                if (dataSeries.Count > 7) sciChartSurface.RenderableSeries[7].DataSeries = dataSeries[dataSeries.Count - 8];
                if (dataSeries.Count > 8) sciChartSurface.RenderableSeries[8].DataSeries = dataSeries[dataSeries.Count - 9];
                
                // Always the oldest dataseries
                if (dataSeries.Count > 9) sciChartSurface.RenderableSeries[9].DataSeries = dataSeries[dataSeries.Count - 10]; 
            }
        }

        public IEnumerable<Point> GetNoisySinewave(double amplitude, double phase, int pointCount, double noiseAmplitude)
        {
            // Uses datamanager from the Examples suite
            var sinewave = DataManager.Instance.GetSinewave(amplitude, phase, pointCount);

            // Add some noise
            foreach (var pt in sinewave)
            {
                yield return new Point(pt.X, pt.Y + (random.NextDouble() * noiseAmplitude - noiseAmplitude*0.5));
            }
        }

        private void Slider_OnValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (this.timer != null)
            {
                this.timer.Interval = TimeSpan.FromMilliseconds(this.Slider.Value);
            }
        }

        /// <summary>
        ///     Called by SciChart's examples suite when the example exits
        /// </summary>
        public void OnExampleExit()
        {
            if (this.timer != null)
            {
                this.timer.Stop();
                timer.Tick -= TimerOnElapsed;
                this.timer = null;
            }
        }

        /// <summary>
        ///     Called by SciChart's examples suite when the example enters
        /// </summary>
        public void OnExampleEnter()
        {
            if (this.timer == null)
            {
                this.timer = new DispatcherTimer();
                this.timer.Interval = TimeSpan.FromMilliseconds(this.Slider.Value);
                timer.Tick += TimerOnElapsed;
                timer.Start();
            }
        }
    }
}
