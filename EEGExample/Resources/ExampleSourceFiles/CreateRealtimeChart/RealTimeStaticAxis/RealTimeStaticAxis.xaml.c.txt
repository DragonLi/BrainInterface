using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;
using Abt.Controls.SciChart.Model.DataSeries;
using Abt.Controls.SciChart.Visuals.Annotations;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.CreateRealtimeChart.RealTimeStaticAxis
{
    /// <summary>
    /// Interaction logic for RealTimeStaticAxis.xaml
    /// </summary>
    public partial class RealTimeStaticAxis : UserControl, IExampleAware
    {
        private DispatcherTimer _timer;
        private readonly Random _random = new Random();

        private int _annotationCoord;
        private int _dataPoint1, _dataPoint2;

        private const int FifoCapacity = 100;
        private const int Interval = 50;

        public RealTimeStaticAxis()
        {
            InitializeComponent();

            mountainRenderableSeries1.DataSeries = new XyDataSeries<double, double>
            {
                FifoCapacity = FifoCapacity,
                SeriesName = "Mountain Series (1)"
            };

            mountainRenderableSeries2.DataSeries = new XyDataSeries<double, double>
            {
                FifoCapacity = FifoCapacity,
                SeriesName = "Mountain Series (2)"
            };
        }

        /// <summary>
        /// Called by SciChart Example framework to start the example
        /// </summary>
        public void OnExampleEnter()
        {
            // Preload with data
            for (int i = 0; i < FifoCapacity; i++)
            {
                TimerOnElapsed(null, EventArgs.Empty);
            }

            if (_timer == null)
            {
                _timer = new DispatcherTimer();
                _timer.Interval = TimeSpan.FromMilliseconds(Interval);
                _timer.Tick += TimerOnElapsed;
                _timer.Start();
            }
        }

        /// <summary>
        /// Called by SciChart Example framework to stop the example
        /// </summary>
        public void OnExampleExit()
        {
            if (_timer != null)
            {
                _timer.Stop();
                _timer.Tick -= TimerOnElapsed;
                _timer = null;
            }
        }

        private int GenerateNextDataPoint(int preveiousValue)
        {
            var newValue = _random.Next(preveiousValue - 2, preveiousValue + 3);

            newValue = Math.Min(20, newValue);
            newValue = Math.Max(-20, newValue);

            return newValue;
        }

        private void TimerOnElapsed(object sender, EventArgs e)
        {
            _dataPoint1 = GenerateNextDataPoint(_dataPoint1);
            _dataPoint2 = GenerateNextDataPoint(_dataPoint2);

            ((XyDataSeries<double, double>)mountainRenderableSeries1.DataSeries).Append(_annotationCoord, _dataPoint1);

            ((XyDataSeries<double, double>)mountainRenderableSeries2.DataSeries).Append(_annotationCoord, _dataPoint2);

            UpdateLineAnnotations();

            _annotationCoord ++;
        }

        private void UpdateLineAnnotations()
        {
            var updatePos = _annotationCoord != 0 && _annotationCoord % 20 == 0;
            foreach (var annotation in sciChart.Annotations.OfType<VerticalLineAnnotation>())
            {
                // update position of annotation to show it again if annotation is ouside of view port
                if (xAxis.VisibleRange != null && updatePos && annotation.X1.CompareTo(xAxis.VisibleRange.Min) < 0)
                {
                    annotation.X1 = (double)_annotationCoord;
                    updatePos = false;
                }

                UpdateLabel(annotation);
            }
        }

        private void UpdateLabel(VerticalLineAnnotation annotation)
        {
            var expr = annotation.GetBindingExpression(LineAnnotationWithLabelsBase.LabelValueProperty);

            if (expr != null)
            {
                var binding = expr.ParentBinding;
                annotation.SetBinding(LineAnnotationWithLabelsBase.LabelValueProperty, binding);
            }
        }
    }
}
