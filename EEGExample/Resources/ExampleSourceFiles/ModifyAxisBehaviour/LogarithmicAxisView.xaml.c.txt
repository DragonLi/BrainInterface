using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using Abt.Controls.SciChart.Example.Data;
using Abt.Controls.SciChart.Model.DataSeries;
using Abt.Controls.SciChart.Visuals.Axes;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.ModifyAxisBehaviour
{
    public partial class LogarithmicAxisView : UserControl, INotifyPropertyChanged
    {
        private IAxis _xAxisLog;
        private IAxis _xAxisNum;
        private IAxis _yAxisLog;
        private IAxis _yAxisNum;
        private IAxis _xAxis;
        private IAxis _yAxis;
        
        private static readonly TimeSpan ts = TimeSpan.FromMilliseconds(500);

        public event PropertyChangedEventHandler PropertyChanged;
        
        public IAxis XAxis
        {
            get { return _xAxis; }
            set
            {
                _xAxis = value;
                OnPropertyChanged("XAxis");
            }
        }

        public IAxis YAxis
        {
            get { return _yAxis; }
            set
            {
                _yAxis = value;
                OnPropertyChanged("YAxis");
            }
        }

        public LogarithmicAxisView()
        {
            InitializeAxes();

            InitializeComponent();
        }

        private void InitializeAxes()
        {
            _xAxisLog = new LogarithmicNumericAxis
            {
                TextFormatting = "#.#E+0",
                ScientificNotation = ScientificNotation.Normalized,
                VisibleRange = new DoubleRange(0, 100), 
                GrowBy = new DoubleRange(0.1, 0.1), 
                DrawMajorBands = false
            };

            _xAxisNum = new NumericAxis
            {
                TextFormatting = "#.#E+0",
                ScientificNotation = ScientificNotation.Normalized,
                VisibleRange = new DoubleRange(0, 100),
                GrowBy = new DoubleRange(0.1, 0.1),
            };

            _yAxisLog = new LogarithmicNumericAxis
            {
                TextFormatting = "#.#E+0",
                ScientificNotation = ScientificNotation.Normalized,
                AxisAlignment = AxisAlignment.Left,
                GrowBy = new DoubleRange(0.1, 0.1),
                DrawMajorBands = false
            };

            _yAxisNum = new NumericAxis
            {
                TextFormatting = "#.#E+0",
                ScientificNotation = ScientificNotation.Normalized,
                AxisAlignment = AxisAlignment.Left,
                GrowBy = new DoubleRange(0.1, 0.1)
            };
        }

        private void LogarithmicAxisView_Loaded(object sender, RoutedEventArgs e)
        {
            // Create some DataSeries of type X=double, Y=double
            var dataSeries0 = new XyDataSeries<double, double>();
            var dataSeries1 = new XyDataSeries<double, double>();
            var dataSeries2 = new XyDataSeries<double, double>();

            var data1 = DataManager.Instance.GetExponentialCurve(1.8, 100);
            var data2 = DataManager.Instance.GetExponentialCurve(2.25, 100);
            var data3 = DataManager.Instance.GetExponentialCurve(3.59, 100);

            // Append data to series.
            dataSeries0.Append(data1.XData, data1.YData);
            dataSeries1.Append(data2.XData, data2.YData);
            dataSeries2.Append(data3.XData, data3.YData);

            // Attach DataSeries to RendetableSeries
            sciChart.RenderableSeries[0].DataSeries = dataSeries0;
            sciChart.RenderableSeries[1].DataSeries = dataSeries1;
            sciChart.RenderableSeries[2].DataSeries = dataSeries2;

            // Zoom to extents of the data
            sciChart.ZoomExtents();

            btnZoom.IsChecked = true;
        }

        private void YAxisLogChecked(object sender, RoutedEventArgs e)
        {
            YAxis = _yAxisLog;
            XAxis = _xAxisNum;

            if (sciChart != null)
            {
                sciChart.AnimateZoomExtents(ts);
            }
        }

        private void XAxisLogChecked(object sender, RoutedEventArgs e)
        {
            YAxis = _yAxisNum;
            XAxis = _xAxisLog;

            if (sciChart != null)
            {
                sciChart.AnimateZoomExtents(ts);
            }
        }

        private void XYAxisLogChecked(object sender, RoutedEventArgs e)
        {
            YAxis = _yAxisLog;
            XAxis = _xAxisLog;

            if (sciChart != null)
            {
                sciChart.AnimateZoomExtents(ts);
            }
        }

        private void NoneChecked(object sender, RoutedEventArgs e)
        {
            YAxis = _yAxisNum;
            XAxis = _xAxisNum;

            if (sciChart != null)
            {
                sciChart.AnimateZoomExtents(ts);
            }
        }

        private void ZoomExtentsClick(object sender, RoutedEventArgs e)
        {
            if (sciChart != null) { sciChart.AnimateZoomExtents(ts); }
        }

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
