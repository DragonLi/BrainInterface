using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using Abt.Controls.SciChart.Example.Data;
using Abt.Controls.SciChart.Model.DataSeries;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.ModifyAxisBehaviour
{
    /// <summary>
    /// Interaction logic for VerticallyStackedAxes.xaml
    /// </summary>
    public partial class VerticallyStackedAxes : UserControl
    {
        public VerticallyStackedAxes()
        {
            InitializeComponent();

            Loaded += OnLoaded;
        }

        private void OnLoaded(object sender, RoutedEventArgs e)
        {
            Task.Factory.StartNew(() =>
                {
                    // Creates 8 dataseries with data on a background thread
                    var dataSeries = new List<IDataSeries>();
                    for (int i = 0; i < 8; i++)
                    {
                        var ds = new XyDataSeries<double, double>();
                        dataSeries.Add(ds);
                        var someData = DataManager.Instance.GetAcousticChannel(i);

                        ds.Append(someData.XData, someData.YData);
                    }

                    // Creates 8 renderable series on the UI thread
                    Dispatcher.BeginInvoke(new Action(() => CreateRenderableSeries(dataSeries)));
                });            
        }

        private void CreateRenderableSeries(List<IDataSeries> result)
        {
            // Batch updates with one redraw
            using (sciChart.SuspendUpdates())
            {
                for (int i = 0; i < 8; i++)
                {
                    sciChart.RenderableSeries[i].DataSeries = result[i];
                }
            }
        }
    }
}
