using System;
using System.Collections.Generic;
using System.Linq;
using Abt.Controls.SciChart.Example.MVVM;
using Abt.Controls.SciChart.Model.DataSeries;
using MathNet.Numerics.LinearAlgebra.Double;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.CreateMultiseriesChart
{
    /// <summary>
    /// Regression example is taken from http://sharpstatistics.co.uk/stats/linear-regression-in-c/
    /// Using MathNet.Numerics, an open source Mathematics library for .NET: http://numerics.mathdotnet.com/
    /// </summary>
    public class LineAndScatterExampleViewModel : BaseViewModel, IExampleAware
    {
        double[] _xRawData = new double[] { 57, 66, 68, 69, 70, 70, 73, 75, 79, 81, 85, 87, 87, 87, 90, 100, 104, 105, 112, 120, 132 };
        double[] _yRawData = new double[] { 53, 70, 72, 81, 60, 67, 72, 72, 92, 76, 85, 82, 90, 96, 82, 130, 194, 198, 208, 231, 231 };
        
        private IList<double> _xfitted;
        private IList<double> _yfitted;

        private IXyDataSeries<double, double> _scatterData;
        private IXyDataSeries<double, double> _fittedData;

        public IXyDataSeries<double, double> ScatterData
        {
            get { return _scatterData; }
            set
            {
                if (_scatterData == value) return;
                _scatterData = value;
                OnPropertyChanged("ScatterData");
            }
        }

        public IXyDataSeries<double, double> FittedData
        {
            get { return _fittedData; }
            set
            {
                if (_fittedData == value) return;
                _fittedData = value;
                OnPropertyChanged("FittedData");
            }
        }
                
        public void OnExampleExit()
        {            
        }

        public void OnExampleEnter()
        {
            GenerateData();
        }

        private void GenerateData()
        {
            _xfitted = new List<double>();
            _yfitted = new List<double>();

            Regression(_xRawData, _yRawData, 3);

            _scatterData = new XyDataSeries<double, double>();
            _fittedData = new XyDataSeries<double, double>();

            // Pad the raw Y-values to have double.NaN in gaps between the original and fitted data
            var yValues = GetYScatterValues(_xfitted, _xRawData, _yRawData);

            _scatterData.Append(_xfitted, yValues);
            _fittedData.Append(_xfitted, _yfitted);
        }

        /// <summary>
        /// Taking a sequential list of items in the X-Axis, and a scatter list of X and Y values, 
        /// we pad the Y values with double.NaN when an original Y value doesnt exist in the fitted list. 
        /// 
        /// e.g. transforming
        /// X= 1, 5, 7 {xRaw}
        /// Y= 2, 4,-1 {yRaw}
        /// 
        /// into
        /// X=0,   1, 2,   3,   4,   5, 6,    7 {xFitted}
        /// Y=NaN, 2, NaN, NaN, NaN, 4, NaN, -1 {Padded Y Values}
        /// </summary>
        /// <param name="xFitted"></param>
        /// <param name="xRaw"></param>
        /// <param name="yRaw"></param>
        /// <returns></returns>
        private IEnumerable<double> GetYScatterValues(IList<double> xFitted, IList<double> xRaw, IList<double> yRaw)
        {
            foreach(double i in xFitted)
            {
                if (!xRaw.Contains(i))
                {
                    // Pad with double.NaN values that are not in the fitted set
                    yield return double.NaN;
                }

                for (int index = 0; index < xRaw.Count; index++)
                {
                    if (xRaw[index] == i)
                        yield return yRaw[index];
                }
            }
        }        

        public void Regression(double[] xdata, double[] ydata, int degree)
        {
            int numberOfSamples = xdata.Length;

            //Define the results
            var coefficients = new double[degree + 1];

            //Set up X and Y Matricies
            var yMatrix = new DenseMatrix(numberOfSamples, 1, ydata);
            var xMatrix = new DenseMatrix(numberOfSamples, degree + 1);
            double[] temp = FilledArray(numberOfSamples, 1.0);
            xMatrix.SetColumn(0, temp);
            for (int i = 0; i < degree; i++)
            {
                xMatrix.SetColumn(i+1,(RaisePower(xdata, i + 1)));
            }

            //Do the calcs
            var Temp = (xMatrix.Transpose() * xMatrix).Inverse();
            var result = Temp.Multiply(xMatrix.Transpose() * yMatrix);

            //Get the coefficients
            coefficients = result.Column(0).ToArray();

            //Calculate the fitted values
            for (double xValue = xdata.Min(); xValue <= xdata.Max(); xValue += 1.0)
            {
                double value = 0;
                for (int coef = 0; coef < coefficients.Length; coef++)
                {
                    value += coefficients[coef] * Math.Pow(xValue, coef);
                }
                _xfitted.Add(xValue);
                _yfitted.Add(value);
            }
        }

        private double[] FilledArray(int length, double value)
        {
            double[] result = new double[length];
            for (int i = 0; i < length; i++)
            {
                result[i] = value;
            }
            return result;
        }

        private double[] RaisePower(double[] data, int power)
        {
            double[] result = new double[data.GetLength(0)];
            for (int i = 0; i < data.GetLength(0); i++)
            {
                result[i] = Math.Pow(data[i], power);
            }
            return result;
        }
    }
}
