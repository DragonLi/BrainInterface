using System;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using Abt.Controls.SciChart.Model.DataSeries;
using Abt.Controls.SciChart.Visuals.RenderableSeries;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.CreateMultiseriesChart
{
    /// <summary>
    /// Interaction logic for GapsInSeries.xaml
    /// </summary>
    public partial class GapsInSeries : UserControl
    {
        private readonly Random _random = new Random();

        public GapsInSeries()
        {
            InitializeComponent();

            drawNanAsCombo.Items.Add(LineDrawMode.ClosedLines);
            drawNanAsCombo.Items.Add(LineDrawMode.Gaps);
            drawNanAsCombo.SelectedItem = LineDrawMode.Gaps;

            Loaded += OnLoaded;
        }

        private void OnLoaded(object sender, RoutedEventArgs routedEventArgs)
        {
            var dataSeries = CreateDataSeries();

            renderableColumnSeries.DataSeries = dataSeries;
            renderableLineSeries.DataSeries = dataSeries;
            renderableMountainSeries.DataSeries = dataSeries;

            sciChartSurface0.ZoomExtents();
            sciChartSurface0.YAxis.VisibleRange = new DoubleRange(-1, 1);
        }

        private IXyDataSeries<double, double> CreateDataSeries()
        {
            var dataSeries = new XyDataSeries<double, double>();
            dataSeries.SeriesName = "Random Series";            

            int i = 0;
            // Samples 0,1,2 append double.NaN
            for (; i < 3; i++)
            {
                dataSeries.Append(i, double.NaN);
            }

            // Samples 3,4,5,6 append values
            for (; i < 7; i++)
            {
                dataSeries.Append(i, _random.NextDouble());
            }

            // Samples 7,8,9 append double.NaN
            for (; i < 10; i++)
            {
                dataSeries.Append(i, double.NaN);
            }

            // Samples 10,11,12,13 append values
            for (; i < 14; i++)
            {
                dataSeries.Append(i, -_random.NextDouble());
            }

            // Samples 14,15,16 append double.NaN
            for (; i < 16; i++)
            {
                dataSeries.Append(i, double.NaN);
            }

            return dataSeries;
        }

        private void ComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (e.AddedItems != null && sciChartSurface0.RenderableSeries.Count > 0)
            {
                var lineSeries = sciChartSurface0.RenderableSeries
                    .OfType<FastLineRenderableSeries>()
                    .First();
                    
                lineSeries.DrawNaNAs = (LineDrawMode)drawNanAsCombo.SelectedItem;
            }
        }
    }
}
