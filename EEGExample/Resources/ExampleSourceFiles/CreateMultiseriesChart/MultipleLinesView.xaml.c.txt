using System;
using System.Windows;
using System.Windows.Controls;
using Abt.Controls.SciChart.ChartModifiers;
using Abt.Controls.SciChart.Example.Data;
using Abt.Controls.SciChart.Model.DataSeries;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.CreateMultiseriesChart
{
    public partial class MultipleLinesView : UserControl
    {
        public MultipleLinesView()
        {
            InitializeComponent();

            cboGetLegendFor.ItemsSource = Enum.GetNames(typeof(SourceMode));
            cboGetLegendFor.SelectedIndex = 1;

            cboLegendPlacement.ItemsSource = Enum.GetNames(typeof (LegendPlacement));
            cboLegendPlacement.SelectedItem = Enum.GetName(typeof (LegendPlacement), LegendPlacement.Inside);

            cboLegendOrientation.ItemsSource = Enum.GetNames(typeof(Orientation));
            cboLegendOrientation.SelectedItem = Enum.GetName(typeof(Orientation), Orientation.Vertical);
        }

        private void MultipleLinesView_OnLoaded(object sender, RoutedEventArgs e)
        {
            // Add some data series of type X=double, Y=double
            var dataSeries0 = new XyDataSeries<double, double> {SeriesName = "Curve A"};
            var dataSeries1 = new XyDataSeries<double, double> {SeriesName = "Curve B"};
            var dataSeries2 = new XyDataSeries<double, double> {SeriesName = "Curve C"};
            var dataSeries3 = new XyDataSeries<double, double> { SeriesName = "Curve D" };

            var data1 = DataManager.Instance.GetStraightLine(1000, 1.0, 10);
            var data2 = DataManager.Instance.GetStraightLine(2000, 1.0, 10);
            var data3 = DataManager.Instance.GetStraightLine(3000, 1.0, 10);
            var data4 = DataManager.Instance.GetStraightLine(4000, 1.0, 10);

            // Append data to series.
            dataSeries0.Append(data1.XData, data1.YData);
            dataSeries1.Append(data2.XData, data2.YData);
            dataSeries2.Append(data3.XData, data3.YData);
            dataSeries3.Append(data4.XData, data4.YData);

            sciChart.RenderableSeries[0].DataSeries = dataSeries0;
            sciChart.RenderableSeries[1].DataSeries = dataSeries1;
            sciChart.RenderableSeries[2].DataSeries = dataSeries2;
            sciChart.RenderableSeries[3].DataSeries = dataSeries3;

            // Zoom to extents of the data
            sciChart.ZoomExtents();
        }

        private void OnLegendModeChanged(object sender, SelectionChangedEventArgs e)
        {
            if (legendModifier != null)
            {
                legendModifier.GetLegendDataFor = (SourceMode)Enum.Parse(typeof(SourceMode), (string)e.AddedItems[0], true);
            }
        }

        private void OnLegendPlacementChanged(object sender, SelectionChangedEventArgs e)
        {
            if (legendModifier != null)
            {
                legendModifier.LegendPlacement = (LegendPlacement)Enum.Parse(typeof(LegendPlacement), (string)e.AddedItems[0], true);
            }
        }

        private void OnLegendOrientationChanged(object sender, SelectionChangedEventArgs e)
        {
            if (legendModifier != null)
            {
                legendModifier.Orientation = (Orientation)Enum.Parse(typeof(Orientation), (string)e.AddedItems[0], true);
            }
        }
    }
}
