using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows.Media;
using Abt.Controls.SciChart.Example.Common;
using Abt.Controls.SciChart.Example.Data;
using Abt.Controls.SciChart.Example.MVVM;
using Abt.Controls.SciChart.Model.DataSeries;
using Abt.Controls.SciChart.Visuals.PointMarkers;
using Abt.Controls.SciChart.Visuals.RenderableSeries;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.UsePaletteProvider
{
    public class UsePaletteProviderViewModel : BaseViewModel
    {
        private readonly ObservableCollection<IChartSeriesViewModel> _chartSeries = new ObservableCollection<IChartSeriesViewModel>();

        private readonly SelectedRangePaletteProvider _paletteProvider = new SelectedRangePaletteProvider
                                                                             {
                                                                                 LineSeriesColor = Colors.Red,
                                                                                 ColumnSeriesColor = Colors.Green,
                                                                                 CandlesticSeriesColor = Colors.Orange
                                                                             };

        public UsePaletteProviderViewModel()
        {
            // In the MvvmSciChartSurface, we don't have to create a dataset. Just create DataSeries and append as usual
            var dataSeries0 = new XyDataSeries<DateTime, double>();
            var dataSeries1 = new OhlcDataSeries<DateTime, double>();
            var dataSeries2 = new OhlcDataSeries<DateTime, double>();
            var dataSeries3 = new XyDataSeries<DateTime, double>();

            var dataSource = DataManager.Instance;

            // Prices are in the format Time, Open, High, Low, Close (all IList)            
            var prices = dataSource.GetPriceData(Instrument.Indu.Value, TimeFrame.Daily);

            var dataOffset = -1000;

            // Append data to series             
            dataSeries0.Append(prices.TimeData, dataSource.Offset(prices.OpenData, -dataOffset));
            dataSeries1.Append(prices.TimeData, prices.OpenData, prices.HighData, prices.LowData, prices.CloseData);
            dataSeries2.Append(prices.TimeData, dataSource.Offset(prices.OpenData, dataOffset),
                               dataSource.Offset(prices.HighData, dataOffset),
                               dataSource.Offset(prices.LowData, dataOffset),
                               dataSource.Offset(prices.CloseData, dataOffset));
            dataSeries3.Append(prices.TimeData, dataSource.Offset(prices.CloseData, dataOffset*3));

            // Add the DataSeries / RenderableSeries to the ChartSeriesViewModel collection
            // These are paired so if you want to remove the series, just remove the viewmodel (it will remove the data and renderable series)
            // Or, if you want to change the RenderableSeries properties, just update the RenderSeries on the ChartSeriesViewModel
            var lineSeriesVm = new ChartSeriesViewModel(dataSeries0, new FastLineRenderableSeries
            {
                SeriesColor = Colors.Orange,
                IsDigitalLine = false,
                PointMarker = new EllipsePointMarker { Height = 3, Width = 3, StrokeThickness = 1, Stroke = Colors.Orange, Fill = Colors.Red },
                PaletteProvider = PaletteProvider
            });

            var ohlcSeriesVm = new ChartSeriesViewModel(dataSeries2, new FastOhlcRenderableSeries
                                                                         {
                                                                             PaletteProvider = PaletteProvider
                                                                         });

            var candlestickSeriesVm = new ChartSeriesViewModel(dataSeries1, new FastCandlestickRenderableSeries
                                                                                {
                                                                                    PaletteProvider = PaletteProvider
                                                                                });

            var columnSeriesVm = new ChartSeriesViewModel(dataSeries3, new FastColumnRenderableSeries
            {
                DataPointWidth = 0.8,
                UseUniformWidth = true,
                SeriesColor = Colors.Blue,
                FillBrush = new SolidColorBrush(Colors.Blue),
                PaletteProvider = PaletteProvider
            });

            _chartSeries.Add(lineSeriesVm);
            _chartSeries.Add(ohlcSeriesVm);
            _chartSeries.Add(candlestickSeriesVm); 
            _chartSeries.Add(columnSeriesVm);
        }

        public ObservableCollection<IChartSeriesViewModel> ChartSeries
        {
            get { return _chartSeries; }
        }

        public IPaletteProvider PaletteProvider
        {
            get { return _paletteProvider; }
        }
    }
}
