using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using Abt.Controls.SciChart.Example.Data;
using Abt.Controls.SciChart.Model.DataSeries;
using Abt.Controls.SciChart.Visuals.Axes;
using Abt.Controls.SciChart.Visuals.RenderableSeries;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.InspectDatapoints
{
    public partial class SeriesSelectionExampleView : UserControl
    {
        private const int SeriesPointCount = 150;
        private const int SeriesCount = 80;

        public SeriesSelectionExampleView()
        {
            InitializeComponent();
        }

        public void SeriesSelectionExampleView_OnLoaded(object sender, RoutedEventArgs e)
        {
            // Create a number of DataSeries of type X=double, Y=double
            var allDataSeries = new IDataSeries<double, double>[SeriesCount];

            var initialColor = Colors.Blue;

            // Suspend visual updates while we add N RenderableSeries
            using (sciChartSurface.SuspendUpdates())
            {
                // Add N data and renderable series
                for (int i = 0; i < SeriesCount; i++)
                {
                    AxisAlignment alignment = i%2 == 0 ? AxisAlignment.Left : AxisAlignment.Right;

                    allDataSeries[i] = GenerateDataSeries(alignment, i);

                    var renderableSeries = new FastLineRenderableSeries {SeriesColor = initialColor};

                    renderableSeries.YAxisId = alignment.ToString();

                    // Assign DataSeries to RenderableSeries
                    renderableSeries.DataSeries = allDataSeries[i];

                    // Assign RenderableSeries to SciChartSurface
                    sciChartSurface.RenderableSeries.Add(renderableSeries);

                    // Colors are incremented for visual purposes only
                    int newR = initialColor.R == 255 ? 255 : initialColor.R + 5;
                    int newB = initialColor.B == 0 ? 0 : initialColor.B - 2;
                    initialColor = Color.FromArgb(255, (byte) newR, initialColor.G, (byte) newB);
                }
            }

            sciChartSurface.ZoomExtents();
        }

        private IDataSeries<double, double> GenerateDataSeries(AxisAlignment axisAlignment, int index)
        {
            var dataSeries = new XyDataSeries<double, double>();
            dataSeries.SeriesName = string.Format("Series {0}", index);

            double gradient = axisAlignment == AxisAlignment.Right ? index : -index;
            double start = axisAlignment == AxisAlignment.Right ? 0.0 : 14000;

            DoubleSeries straightLineData = DataManager.Instance.GetStraightLine(gradient, start, SeriesPointCount);           

            dataSeries.Append(straightLineData.XData, straightLineData.YData);
            return dataSeries;
        }
    }
}
