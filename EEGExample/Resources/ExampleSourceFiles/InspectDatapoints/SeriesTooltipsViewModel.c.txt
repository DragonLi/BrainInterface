using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Media;
using Abt.Controls.SciChart.Example.Data;
using Abt.Controls.SciChart.Example.MVVM;
using Abt.Controls.SciChart.Model.DataSeries;
using Abt.Controls.SciChart.Visuals;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.InspectDatapoints
{
    public class SeriesTooltipsViewModel : BaseViewModel
    {
        private IXyDataSeries<double, double> _dataSeries1;
        private IXyDataSeries<double, double> _dataSeries2;
        
        private double _highThreshold;
        private double _lowThreshold;

        public SeriesTooltipsViewModel()
        {
            DataSeries1 = new XyDataSeries<double, double>();

            var data1 = DataManager.Instance.GetSinewave(1.0, 0.0, 1000);

            DataSeries1.Append(data1.XData, data1.YData);

            DataSeries2 = new XyDataSeries<double, double>();

            var data2 = DataManager.Instance.GetSinewave(1.5, 1.0, 1000);

            DataSeries2.Append(data2.XData, data2.YData);

            LowThreshold = -0.5d;
            HighThreshold = 0.5d;
        }

        public IXyDataSeries<double, double> DataSeries2
        {
            get { return _dataSeries2; }
            set
            {
                if (_dataSeries2 == value) return;
                _dataSeries2 = value;
                OnPropertyChanged("DataSeries2");
            }
        }

        public IXyDataSeries<double, double> DataSeries1
        {
            get { return _dataSeries1; }
            set
            {
                if (_dataSeries1 == value) return;
                _dataSeries1 = value;
                OnPropertyChanged("DataSeries1");
            }
        }

        public double HighThreshold
        {
            get { return _highThreshold; }
            set
            {
                if (_highThreshold == value) return;
                _highThreshold = value;
                OnPropertyChanged("HighThreshold");
            }
        }

        public double LowThreshold
        {
            get { return _lowThreshold; }
            set
            {
                if (_lowThreshold == value) return;
                _lowThreshold = value;
                OnPropertyChanged("LowThreshold");
            }
        }

        public Func<SeriesInfo, object> TooltipDataContext
        {
            get
            {
                return seriesInfo =>
                {
                    seriesInfo.RenderableSeries.IsSelected = true;

                    return new SelectorContext()
                    {
                        XValue = seriesInfo.XValue,
                        YValue = seriesInfo.YValue,

                        SeriesColor = GetTooltipColor(seriesInfo)
                    };
                };
            }
        }

        private Color GetTooltipColor(SeriesInfo seriesInfo)
        {
            if (seriesInfo.YValue.CompareTo(LowThreshold) > 0 && seriesInfo.YValue.CompareTo(HighThreshold) < 0)
            {
                return Color.FromArgb(75, 150, 150, 150); ;
            }
            else if (seriesInfo.YValue.CompareTo(LowThreshold) < 0)
            {
                return Color.FromArgb(75, 150, 0, 0);
            }
            else
            {
                return Color.FromArgb(75, 0, 150, 0);
            }
        }
    }

    public class SelectorContext
    {
        public IComparable XValue { get; set; }
        public IComparable YValue { get; set; }
        public Color SeriesColor { get; set; }
    }
}
