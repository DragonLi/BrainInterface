using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using Abt.Controls.SciChart.ChartModifiers;
using Abt.Controls.SciChart.Model.DataSeries;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.InspectDatapoints
{
    public partial class HitTestDatapoints : UserControl
    {
        public HitTestDatapoints()
        {
            InitializeComponent();

            // Append some data
            var series0 = new XyDataSeries<double, double> { SeriesName = "Line Series"};
            series0.Append(new double[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }, new double[] { 0, 0.1, 0.3, 0.5, 0.4, 0.35, 0.3, 0.25, 0.2, 0.1, 0.05 });
            renderableLineSeries.DataSeries = series0;

            var series1 = new XyDataSeries<double, double> { SeriesName = "Column Series"};
            series1.Append(series0.XValues, series0.YValues.Select(x => x * 0.7));
            renderableColumnSeries.DataSeries = series1;

            var series2 = new OhlcDataSeries<double, double> {SeriesName = "Candlestick Series"};
            series2.Append(series0.XValues, series0.YValues.Select(x => x + 0.5), series0.YValues.Select(x => x + 1.0), series0.YValues.Select(x => x + 0.3), series0.YValues.Select(x => x + 0.7));
            renderableCandlestickSeries.DataSeries = series2;
        }

        private void SciChartSurfaceMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            const string formatString = "{6}:\tMouse Coord: {0:0}, {1:0}\t\tNearest Datapoint Coord: {2:0.0}, {3:0.0}\tData Value: {4:0.0}, {5:0.0}";

            // Perform the hit test relative to the GridLinesPanel
            var hitTestPoint = e.GetPosition(sciChartSurface.GridLinesPanel as UIElement);

            // Show info for series, which HitTest operation was successful for only
            foreach(var renderableSeries in sciChartSurface.RenderableSeries)
            {
                // Get hit-test the RenderableSeries using interpolation
                var hitTestInfo = renderableSeries.HitTest(hitTestPoint, true);

                if (hitTestInfo.IsHit)
                {
                    // Convert the result of hit-test operation to SeriesInfo
                    var seriesInfo = renderableSeries.GetSeriesInfo(hitTestInfo);

                    // Output result
                    var formattedString = SeriesInfoToFormattedString(seriesInfo, hitTestPoint, formatString);

                    // Show result
                    Console.WriteLine(formattedString);
                    AddOnView(formattedString);
                }
            }
        }

        private string SeriesInfoToFormattedString(SeriesInfo seriesInfo, Point hitTestPoint, string formatString)
        {
            string formattedString =
                string.Format(
                    "{6}:\tMouse Coord: {0:0}, {1:0}\t\tNearest Datapoint Coord: {2:0.0}, {3:0.0}\tData Value: {4:0.0}, {5:0.0}",
                    seriesInfo.XyCoordinate.X, seriesInfo.XyCoordinate.Y,
                    hitTestPoint.X, hitTestPoint.Y,
                    seriesInfo.XValue, seriesInfo.YValue,
                    seriesInfo.SeriesName);

            return formattedString;
        }

        private void AddOnView(string formattedString)
        {
            var newItem = new ListBoxItem {Content = formattedString};

            hitTestListbox.Items.Add(newItem);

            hitTestListbox.ScrollIntoView(newItem);
        }

    }
}
