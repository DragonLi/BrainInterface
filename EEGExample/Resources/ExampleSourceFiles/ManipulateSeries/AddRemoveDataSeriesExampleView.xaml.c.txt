using System;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using Abt.Controls.SciChart.Example.Data;
using Abt.Controls.SciChart.Model.DataSeries;
using Abt.Controls.SciChart.Visuals.RenderableSeries;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.ManipulateSeries
{
    /// <summary>
    /// Interaction logic for AddRemoveDataSeriesExampleView.xaml
    /// </summary>
    public partial class AddRemoveDataSeriesExampleView : UserControl
    {
        public AddRemoveDataSeriesExampleView()
        {
            InitializeComponent();
            this.Loaded += SciChartSurfaceLoaded;
        }

        private void SciChartSurfaceLoaded(object sender, RoutedEventArgs e)
        {
            sciChartSurface.RenderableSeries.Clear();
        }

        private void DeleteSeriesClick(object sender, RoutedEventArgs e)
        {
            var rSeries = sciChartSurface.SelectedRenderableSeries.FirstOrDefault();
            if (rSeries == null || rSeries.DataSeries == null) 
                return;

            sciChartSurface.RenderableSeries.Remove(rSeries);

            sciChartSurface.ZoomExtents();

            OnSeriesSelectionChanged();
        }

        private void OnSeriesSelectionChanged()
        {
            bool hasSelection = sciChartSurface.SelectedRenderableSeries.Any();

            deleteSeriesButton.IsEnabled = hasSelection;
        }

        private void AddSeriesClick(object sender, RoutedEventArgs e)
        {
            // Create a DataSeries and append some data
            var dataSeries = new XyDataSeries<double, double>();
            var doubleData = DataManager.Instance.GetRandomDoubleSeries(250);
            dataSeries.Append(doubleData.XData, doubleData.YData);

            // Create a RenderableSeries and ensure DataSeries is set
            var renderSeries = new FastLineRenderableSeries
                {
                    SeriesColor = DataManager.Instance.GetRandomColor(), 
                    DataSeries = dataSeries,
                };

            // Add the new RenderableSeries
            sciChartSurface.RenderableSeries.Add(renderSeries);


            sciChartSurface.ZoomExtents();
        }

        private void SeriesSelectionModifier_SelectionChanged(object sender, EventArgs e)
        {
            OnSeriesSelectionChanged();
        }
    }
}
