using System;
using System.Windows;
using System.Windows.Controls;
using Abt.Controls.SciChart.Example.Data;
using Abt.Controls.SciChart.Model.DataSeries;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.ZoomAndPanAChart
{
    public partial class DragAreaToZoom : UserControl
    {
        public DragAreaToZoom()
        {
            InitializeComponent();
        }

        private void DragAreaToZoom_Loaded(object sender, RoutedEventArgs e)
        {
            // Performing multiple updates in a SuspendUpdates block is efficient as only one redraw is performed
            using (sciChart.SuspendUpdates())
            {
                // Add some data series of type X=double, Y=double
                var dataSeries0 = new XyDataSeries<double, double>();
                var dataSeries1 = new XyDataSeries<double, double>();

                var data2 = DataManager.Instance.GetFourierSeries(1.0, 0.1);
                var data1 = DataManager.Instance.GetDampedSinewave(1500, 3.0, 0.0, 0.005, data2.Count);

                // Append data to series.
                dataSeries0.Append(data1.XData, data1.YData);
                dataSeries1.Append(data2.XData, data2.YData);

                lineSeries.DataSeries = dataSeries1;
                mountainSeries.DataSeries = dataSeries0;

                // Set initial zoom
                sciChart.ZoomExtents();
            }
        }

        private void ZoomXOnly_Checked(object sender, RoutedEventArgs e)
        {
            if (rubberBandZoomModifier != null)
            {
                var checkBox = (CheckBox)sender;
                rubberBandZoomModifier.IsXAxisOnly = checkBox.IsChecked == true;
            } 
        }

        private void UseAnimation_Checked(object sender, RoutedEventArgs e)
        {
            var checkBox = (CheckBox) sender;
            if (rubberBandZoomModifier != null) rubberBandZoomModifier.IsAnimated = checkBox.IsChecked == true;
            if (zoomExtentsModifier != null) zoomExtentsModifier.IsAnimated = checkBox.IsChecked == true;
        }

        private void ZoomExtentsY_Checked(object sender, RoutedEventArgs e)
        {
            if (rubberBandZoomModifier != null)
            {
                var checkBox = (CheckBox)sender;
                rubberBandZoomModifier.ZoomExtentsY = checkBox.IsChecked == true;
            } 
        }
    }
}
