using System.Windows;
using System.Windows.Controls;
using Abt.Controls.SciChart.ChartModifiers;
using Abt.Controls.SciChart.Example.Data;
using Abt.Controls.SciChart.Model.DataSeries;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.ZoomAndPanAChart
{
    public partial class MouseDragToPan : UserControl
    {
        public MouseDragToPan()
        {
            InitializeComponent();
        }

        private void MouseDragToPan_Loaded(object sender, RoutedEventArgs e)
        {
            // Performing multiple updates in a SuspendUpdates block is efficient as only one redraw is performed
            using (sciChart.SuspendUpdates())
            {
                // Create 3 DataSeries of type X=double, Y=double
                var dataSeries0 = new XyDataSeries<double, double>();
                var dataSeries1 = new XyDataSeries<double, double>();
                var dataSeries2 = new XyDataSeries<double, double>();

                var data1 = DataManager.Instance.GetDampedSinewave(300, 1.0, 0.0, 0.01, 1000);
                var data2 = DataManager.Instance.GetDampedSinewave(300, 1.0, 0.0, 0.024, 1000);
                var data3 = DataManager.Instance.GetDampedSinewave(300, 1.0, 0.0, 0.049, 1000);

                // Append data to series.
                dataSeries0.Append(data1.XData, data1.YData);
                dataSeries1.Append(data2.XData, data2.YData);
                dataSeries2.Append(data3.XData, data3.YData);

                // Assign DataSeries to RenderableSeries
                sciChart.RenderableSeries[0].DataSeries = dataSeries0;
                sciChart.RenderableSeries[1].DataSeries = dataSeries1;
                sciChart.RenderableSeries[2].DataSeries = dataSeries2;

                // Set initial zoom
                sciChart.XAxis.VisibleRange = new DoubleRange(3, 6);
                sciChart.ZoomExtentsY();
            }
        }

        // Optional: demonstrates changing which mouse button ZoomPanModifier reacts to
        private void MouseLeft_Checked(object sender, RoutedEventArgs e)
        {
            if (zoomPanModifier != null) zoomPanModifier.ExecuteOn = ExecuteOn.MouseLeftButton;
        }

        private void MouseMiddle_Checked(object sender, RoutedEventArgs e)
        {
            if (zoomPanModifier != null) zoomPanModifier.ExecuteOn = ExecuteOn.MouseMiddleButton;
        }

        private void MouseRight_Checked(object sender, RoutedEventArgs e)
        {
            if (zoomPanModifier != null) zoomPanModifier.ExecuteOn = ExecuteOn.MouseRightButton;
        }
    }
}
