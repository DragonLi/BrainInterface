using System;
using System.Windows;
using System.Windows.Controls;
using Abt.Controls.SciChart.Example.Common;
using Abt.Controls.SciChart.Example.Data;
using Abt.Controls.SciChart.Model.DataSeries;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.ZoomAndPanAChart
{
    public partial class MouseWheelToZoomPan : UserControl
    {
        public MouseWheelToZoomPan()
        {
            InitializeComponent();
        }

        private void MouseWheelToZoomPan_Loaded(object sender, RoutedEventArgs e)
        {
            using (sciChart.SuspendUpdates())
            {
                // Create some dataseries of type x=DateTime, y=Double
                var dataSeries0 = new OhlcDataSeries<DateTime, double>();
                var dataSeries1 = new XyDataSeries<DateTime, double>();
                var dataSeries2 = new XyDataSeries<DateTime, double>();
                var dataSeries3 = new XyDataSeries<DateTime, double>();

                // Prices are in the format Time, Open, High, Low, Close (all IList)
                var prices = DataManager.Instance.GetPriceData(Instrument.Indu.Value, TimeFrame.Daily);

                // Append data to series. 
                // First series is rendered as a Candlestick Chart so we append OHLC data
                dataSeries0.Append(prices.TimeData, prices.OpenData, prices.HighData, prices.LowData, prices.CloseData);

                // Subsequent series append moving average of the close prices
                dataSeries1.Append(prices.TimeData, DataManager.Instance.ComputeMovingAverage(prices.CloseData, 100));
                dataSeries2.Append(prices.TimeData, DataManager.Instance.ComputeMovingAverage(prices.CloseData, 50));
                dataSeries3.Append(prices.TimeData, DataManager.Instance.ComputeMovingAverage(prices.CloseData, 20));

                candlestickSeries.DataSeries = dataSeries0;
                lineSeries0.DataSeries = dataSeries1;
                lineSeries1.DataSeries = dataSeries2;
                lineSeries2.DataSeries = dataSeries3;

                sciChart.ZoomExtents();
            }
        }

        private void OnSciChartSurfaceLoaded(object sender, RoutedEventArgs e)
        {
            zoomAction.IsChecked = true;
            xyDirection.IsChecked = true;
        }

        private void XDirection_Checked(object sender, RoutedEventArgs e)
        {
            if (mouseWheelZoomModifier != null) mouseWheelZoomModifier.XyDirection = XyDirection.XDirection;
        }

        private void YDirection_Checked(object sender, RoutedEventArgs e)
        {
            if (mouseWheelZoomModifier != null) mouseWheelZoomModifier.XyDirection = XyDirection.YDirection;
        }

        private void XYDirection_Checked(object sender, RoutedEventArgs e)
        {
            if (mouseWheelZoomModifier != null) mouseWheelZoomModifier.XyDirection = XyDirection.XYDirection;
        }

        private void PanAction_Checked(object sender, RoutedEventArgs e)
        {
            if (mouseWheelZoomModifier != null) mouseWheelZoomModifier.ActionType = ActionType.Pan;
        }

        private void ZoomAction_Checked(object sender, RoutedEventArgs e)
        {
            if (mouseWheelZoomModifier != null) mouseWheelZoomModifier.ActionType = ActionType.Zoom;
        }
    }
}
