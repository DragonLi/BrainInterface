using System;
using System.Windows.Media;
using Abt.Controls.SciChart.Example.Data;
using Abt.Controls.SciChart.Model.DataSeries;
using Abt.Controls.SciChart.Visuals.RenderableSeries;

namespace Abt.Controls.SciChart.Example.Examples.IWantTo.CreateStockCharts.MultiPane
{
    public class PricePaneViewModel : BaseChartPaneViewModel
    {
        public PricePaneViewModel(CreateMultiPaneStockChartsViewModel parentViewModel, PriceSeries prices)
            : base(parentViewModel)
        {
            // We can add Series via the SeriesSource API, where SciStockChart or SciChartSurface bind to IEnumerable<IChartSeriesViewModel>
            // Alternatively, you can delcare your RenderableSeries in the SciStockChart and just bind to DataSeries
            // A third method (which we don't have an example for yet, but you can try out) is to create an Attached Behaviour to transform a collection of IDataSeries into IRenderableSeries
            // 

            // Add the main OHLC chart
            var stockPrices = new OhlcDataSeries<DateTime, double>();
            stockPrices.Append(prices.TimeData, prices.OpenData, prices.HighData, prices.LowData, prices.CloseData);
            base.ChartSeriesViewModels.Add(new ChartSeriesViewModel(stockPrices, new FastCandlestickRenderableSeries() { AntiAliasing = false }));

            // Add a moving average
            var maLow = new XyDataSeries<DateTime, double>();
            maLow.Append(prices.TimeData, prices.CloseData.MovingAverage(50));
            base.ChartSeriesViewModels.Add(new ChartSeriesViewModel(maLow, new FastLineRenderableSeries() { SeriesColor = Color.FromArgb(0xFF, 0xFF, 0x33, 0x33), StrokeThickness = 2}));

            // Add a moving average
            var maHigh = new XyDataSeries<DateTime, double>();
            maHigh.Append(prices.TimeData, prices.CloseData.MovingAverage(200));
            base.ChartSeriesViewModels.Add(new ChartSeriesViewModel(maHigh, new FastLineRenderableSeries() { SeriesColor = Color.FromArgb(0xFF, 0x33, 0xDD, 0x33), StrokeThickness = 2}));

            YAxisTextFormatting = "$0.0000";
        }
    }
}
